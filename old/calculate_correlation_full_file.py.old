# -*- coding: utf-8 -*-
"""
Created on Wed Jun  7 22:19:25 2017

@author: Villanueva
"""

import os
import struct
import logging

import tqdm
import numpy as np

from plotter import setup_plotting
from common_util import get_signal_and_noise_from_hist

# pylint: disable=W1202


def calculate_correlation(data_file, header, bin_width, hist_len, plot_update_rate=60):
    num_events = header['TTResult_NumberOfRecords']
    res = header['MeasDesc_GlobalResolution']
    total_experimental_time = header['TTResult_StopAfter']*1e-3  # in s

    # skip header
    data_file.seek(header['end_header_pos'], os.SEEK_SET)

    logger = logging.getLogger(__name__)

    j = 0
    overflow = 0
    synccnt = 0  # counts on SYNC
    inputcnt = 0  # counts in INPUT
    currentlist = [[0, 2], [0, 2]]
    hist = np.zeros((hist_len, )) #[0]*hist_len
    hist_time = (np.linspace(-hist_len//2+1, hist_len//2, num=hist_len)-1)*bin_width # time in s
    current_time = 0

    EVENT_TIME_CHANGE = 63
    EVENT_PHOTON_SYNC = 0
    EVENT_PHOTON_INPUT = 0

    total_num_updates = int(total_experimental_time//plot_update_rate) + 1
    signal_error_amplitudes = np.zeros((total_num_updates, 5))
    num_updates = 0
    last_update_time = 0

    # setup the plots
    update_plots = setup_plotting(hist_len, bin_width)

    max_delta_t = bin_width*hist_len/2  # in s, maximum time difference to calculate correlation

    with tqdm.tqdm(total=num_events, desc='Calculating correlation', unit='events') as pbar:
        while j < num_events:
            k = 0
            while currentlist[k][0] - currentlist[0][0] < max_delta_t:
                while len(currentlist) <= k + 1:
                    pbar.update(1)
                    j += 1
                    if j == num_events:
                        break

                    # process event
                    event_data = format(struct.unpack('I', data_file.read(4))[0], '032b')

                    # process event
                    event_time = int(event_data[-25:], 2)  # in ps
                    event_channel = int(event_data[1:7], 2)
                    event_special = int(event_data[0], 2)
                    current_time = res*(overflow + event_time)
                    if event_special == EVENT_PHOTON_INPUT:  # INPUT photon
                        inputcnt += 1
                        currentlist.append([current_time, 1])
                    else:
                        if event_channel == EVENT_TIME_CHANGE: # overflow
                            if event_time == 0:  # never happens in the new format
                                overflow += 2**25
                            else:
                                overflow += event_time*(2**25)
                        elif event_channel == EVENT_PHOTON_SYNC: # SYNC photon
                            synccnt += 1
                            currentlist.append([current_time, 0])
                        elif 1 <= event_channel <= 15:
                            logger.debug('Marker event')
                        else:
                            logger.debug('Unknown event')

                    if len(currentlist) > k + 1:
                        break

                # update histogram
                if currentlist[0][1] == 0 and currentlist[k][1] == 1:
                    dif = (currentlist[k][0] - currentlist[0][0])/bin_width
                    locdif = int(dif) + hist_len//2
                    hist[locdif] += 1
                if currentlist[0][1] == 1 and currentlist[k][1] == 0:
                    dif = (currentlist[0][0] - currentlist[k][0])/bin_width
                    locdif = int(dif) + hist_len//2-1
                    hist[locdif] += 1
                k += 1

                # plot current histogram and exponential decay fit
                if current_time - last_update_time > plot_update_rate and synccnt+inputcnt != 0:
                    last_update_time = current_time

                    norm_factor = synccnt * inputcnt / current_time * bin_width
                    temp_norm_hist = hist/norm_factor
                    decay_params, decay_error, noise_mean, noise_std = get_signal_and_noise_from_hist(temp_norm_hist, hist_time)
                    signal_error_amplitudes[num_updates, :] = [current_time,
                                                               decay_params[0], decay_error[0],
                                                               noise_mean, noise_std]
                    update_plots(temp_norm_hist, decay_params, decay_error, current_time)
                    num_updates += 1

                if j == num_events:
                    break

            del currentlist[0]

    norm_factor = synccnt * inputcnt / current_time * bin_width
    norm_hist = hist/norm_factor
    decay_params, decay_error, noise_mean, noise_std = get_signal_and_noise_from_hist(temp_norm_hist, hist_time)
    signal_error_amplitudes[num_updates, :] = [current_time, decay_params[0], decay_error[0],
                                               noise_mean, noise_std]
    update_plots(norm_hist, decay_params, decay_error, current_time)

    return (norm_hist, current_time, synccnt, inputcnt, signal_error_amplitudes)
